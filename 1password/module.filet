use homebrew
use jq
use json

brew_install 1password
brew_install 1password-cli

copy ~/.zshrc.d

ONEPASSWORD_SETTINGS_ROOT=~/"Library/Group Containers/2BUA8C4S2C.com.1password/Library/Application Support/1Password/Data/settings"
ONEPASSWORD_SETTINGS="${ONEPASSWORD_SETTINGS_ROOT}"/settings.json
# If this is a fresh install, launch 1Password and wait for it to initialize.
if [[ ! -d "${ONEPASSWORD_SETTINGS_ROOT}" ]]; then
  (
    while [[ ! -d "${ONEPASSWORD_SETTINGS_ROOT}" ]]; do
      sleep 0.1
    done
    sleep 0.5 # What else can we detect…?
    killall 1Password
  ) &
  open -W /Applications/1Password.app
fi

merge_json "${ONEPASSWORD_SETTINGS}" ./settings.json

1pass_has_account() (
  email="${1}"
  server="${2:-my.1password.com}"
  
  op --format json account list | jq -e "any(contains({url: \"${server}\", email: \"${email}\"}))" > /dev/null
)

1pass_login() (
  email="${1}"
  server="${2:-my.1password.com}"

  if 1pass_has_account "${email}" "${server}"; then return 0; fi

  echo "Please log into ${server} as ${email}…"

  # Make sure that 1Password is running so that the op bridge works
  open /Applications/1Password.app
  sleep 1.0

  open "onepassword://team-account/add?email=${email}&server=https://${server}"
  while ! 1pass_has_account "${email}" "${server}"; do
    sleep 0.1
  done
)
